initializing SDL
<--- Entering Experiment::Experiment() 0 --->
<--- Exiting Experiment::Experiment() 0 --->
<--- Entering Experiment::InitializeDB() 0 --->
using sqlite3 version
<--- Exiting Experiment::InitializeDB() 0 --->
<--- Entering Experiment::InitializeExp() --->
mode is 1
<--- Entering Experiment::DeleteSession()  --->
sqlite: DELETE FROM  StateTiming  WHERE TrialID IN (SELECT TrialID FROM Trial WHERE SessionID=1)
sqlite: DELETE FROM  EventTiming  WHERE TrialID IN (SELECT TrialID FROM Trial WHERE SessionID=1)
sqlite: DELETE FROM  Msg  WHERE TrialID IN (SELECT TrialID FROM Trial WHERE SessionID=1)
sqlite: DELETE FROM  Mouse  WHERE RespID IN (SELECT RespID FROM Response JOIN Trial USING (TrialID) WHERE SessionID=1)
sqlite: DELETE FROM  Eye  WHERE RespID IN (SELECT RespID FROM Response JOIN Trial USING (TrialID) WHERE SessionID=1)
sqlite: DELETE FROM  Keyboard  WHERE RespID IN (SELECT RespID FROM Response JOIN Trial USING (TrialID) WHERE SessionID=1)
sqlite: DELETE FROM  KeyTrack  WHERE RespID IN (SELECT RespID FROM Response JOIN Trial USING (TrialID) WHERE SessionID=1)
sqlite: DELETE FROM  ResponsesExcluded  WHERE RespID IN (SELECT RespID FROM Response JOIN Trial USING (TrialID) WHERE SessionID=1)
sqlite: DELETE FROM  GamePad  WHERE RespID IN (SELECT RespID FROM Response JOIN Trial USING (TrialID) WHERE SessionID=1)
sqlite: DELETE FROM  Response  WHERE TrialID IN (SELECT TrialID FROM Trial WHERE SessionID=1)
sqlite: DELETE FROM  Trial  WHERE SessionID=1
<--- Exiting Experiment::DeleteSession()  --->
<--- Entering Experiment::CreateOrPurgeResponseDir()  --->
response/s0000001
<--- Exiting Experiment::CreateOrPurgeResponseDir()  --->
sqlite: SELECT ListID FROM Session WHERE SessionID=1
ListID is 1 for SessionID 1
sqlite: UPDATE Session SET Completion='IN PROGRESS' WHERE SessionID=1
sqlite: UPDATE Session SET Seed=1465413720 WHERE SessionID=1
established seed of 1465413720
sqlite: UPDATE Session SET Completion='IN_PROGRESS' WHERE SessionID=1
sqlite: UPDATE Session SET Date=datetime('now') WHERE SessionID=1
LOADING EXPERIMENT CONFIGURATION...
sqlite: SELECT COUNT(*) FROM sqlite_master WHERE type='table' and name='EXPConfig'
sqlite: SELECT Var, Data FROM EXPConfig
sqlite: SELECT SubjID FROM Subject WHERE SessionID=1
Subject ID is 1
<--- Entering Experiment::LoadTemplates() --->
sqlite: SELECT Template.TemplateID, Template.Timeout, Template.Name 
FROM Template 
INNER JOIN Item ON Template.TemplateID=Item.TemplateID 
INNER JOIN ListOrder ON Item.ItemCellID=ListOrder.ItemCellID 
INNER JOIN Phase ON ListOrder.PhaseID=Phase.PhaseID 
INNER JOIN Block ON Phase.BlockID=Block.BlockID 
WHERE ListOrder.ListID= 1 
GROUP BY Template.TemplateID, Template.Timeout, Template.Name
   <--- Entering Template::Template() only (1) --->
   <--- Exiting Template::Template() only (1) --->
   <--- Entering Template::Template() done_test (2) --->
   <--- Exiting Template::Template() done_test (2) --->

2 templates retrieved

   <--- Entering Template::LoadAOIs() only (1) --->
sqlite: SELECT AOIArgs.AOIID, AOIArgs.ArgID, AOIArgs.Info 
FROM AOIArgs INNER JOIN AOI ON AOI.AOIID=AOIArgs.AOIID 
WHERE AOI.ID=1 AND AOI.Link='template' 
ORDER BY AOIArgs.AOIID, AOIArgs.ArgID
sqlite: SELECT AOI.AOIID, Name, Resource, x1, y1, Layer 
FROM AOI 
WHERE ID=1 AND Link='template' 
ORDER BY Layer, AOI.AOIID ASC
   <--- Exiting Template::LoadAOIs() only (1) --->
sqlite: SELECT StateID, Name, Sequence 
FROM State 
WHERE TemplateID= 1 
ORDER BY Sequence;

TemplateID 1 has 1 states.

      <--- Entering State::State() only (1) --->
      <--- Exiting State::State() only (1) --->
      <--- Entering LoadEvents() only (1) --->
sqlite: SELECT EventID, EvtCmdID, Msec 
FROM Event 
WHERE StateID=1
ORDER BY Msec ASC
         <--- Entering State::GetArgs() only (1) --->
sqlite: SELECT ArgID, Info 
FROM EventArgs
WHERE EventID=1
         <--- Exiting State::GetArgs() only (1) --->
the EvtCmdID was 5
   <--- Entering Event::Event() 1 --->
   <--- Exiting Event::Event() 1 --->
         <--- Entering State::GetArgs() only (1) --->
sqlite: SELECT ArgID, Info 
FROM EventArgs
WHERE EventID=2
         <--- Exiting State::GetArgs() only (1) --->
the EvtCmdID was 8
         <--- Entering StimulusTxt::StimulusTxt()() $TXT --->
         <--- Exiting StimulusTxt::StimulusTxt()() $TXT --->
         <--- Entering State::GetArgs() only (1) --->
sqlite: SELECT ArgID, Info 
FROM EventArgs
WHERE EventID=5
         <--- Exiting State::GetArgs() only (1) --->
the EvtCmdID was 1
         <--- Entering StimulusImg::StimulusImg(mmArgs)() $IMGFILE --->
         <--- Exiting StimulusImg::StimulusImg(mmArgs)() $IMGFILE --->
      <--- Exiting LoadEvents() only (1) --->
      <--- Entering LoadWatches() only (1) --->
sqlite: SELECT WatchID, WCmdID, NextStateID 
FROM Watch 
WHERE StateID=1
ORDER BY WatchID ASC
         <--- Entering State::GetArgs() only (1) --->
sqlite: SELECT ArgID, Info 
FROM WatchArgs
WHERE WatchID=1
         <--- Exiting State::GetArgs() only (1) --->
      <--- Exiting LoadWatches() only (1) --->
   <--- Entering Template::LoadAOIs() done_test (2) --->
sqlite: SELECT AOIArgs.AOIID, AOIArgs.ArgID, AOIArgs.Info 
FROM AOIArgs INNER JOIN AOI ON AOI.AOIID=AOIArgs.AOIID 
WHERE AOI.ID=2 AND AOI.Link='template' 
ORDER BY AOIArgs.AOIID, AOIArgs.ArgID
sqlite: SELECT AOI.AOIID, Name, Resource, x1, y1, Layer 
FROM AOI 
WHERE ID=2 AND Link='template' 
ORDER BY Layer, AOI.AOIID ASC
   <--- Exiting Template::LoadAOIs() done_test (2) --->
sqlite: SELECT StateID, Name, Sequence 
FROM State 
WHERE TemplateID= 2 
ORDER BY Sequence;

TemplateID 2 has 1 states.

      <--- Entering State::State() done_test (2) --->
      <--- Exiting State::State() done_test (2) --->
      <--- Entering LoadEvents() done_test (2) --->
sqlite: SELECT EventID, EvtCmdID, Msec 
FROM Event 
WHERE StateID=2
ORDER BY Msec ASC
         <--- Entering State::GetArgs() done_test (2) --->
sqlite: SELECT ArgID, Info 
FROM EventArgs
WHERE EventID=3
         <--- Exiting State::GetArgs() done_test (2) --->
the EvtCmdID was 5
   <--- Entering Event::Event() 3 --->
   <--- Exiting Event::Event() 3 --->
         <--- Entering State::GetArgs() done_test (2) --->
sqlite: SELECT ArgID, Info 
FROM EventArgs
WHERE EventID=6
         <--- Exiting State::GetArgs() done_test (2) --->
the EvtCmdID was 1
         <--- Entering StimulusImg::StimulusImg(mmArgs)() IMGFILE --->
         <--- Exiting StimulusImg::StimulusImg(mmArgs)() IMGFILE --->
         <--- Entering State::GetArgs() done_test (2) --->
sqlite: SELECT ArgID, Info 
FROM EventArgs
WHERE EventID=4
         <--- Exiting State::GetArgs() done_test (2) --->
the EvtCmdID was 8
         <--- Entering StimulusTxt::StimulusTxt()() $TXT --->
         <--- Exiting StimulusTxt::StimulusTxt()() $TXT --->
      <--- Exiting LoadEvents() done_test (2) --->
      <--- Entering LoadWatches() done_test (2) --->
sqlite: SELECT WatchID, WCmdID, NextStateID 
FROM Watch 
WHERE StateID=2
ORDER BY WatchID ASC
         <--- Entering State::GetArgs() done_test (2) --->
sqlite: SELECT ArgID, Info 
FROM WatchArgs
WHERE WatchID=2
         <--- Exiting State::GetArgs() done_test (2) --->
      <--- Entering WatchDone::WatchDone() 2 --->
      <--- Exiting WatchDone::WatchDone() 2 --->
      <--- Exiting LoadWatches() done_test (2) --->
<--- Exiting Experiment::LoadTemplates() --->
<--- Entering Experiment::LoadItems() --->
sqlite: SELECT Item.ItemCellID, Item.TemplateID 
FROM Item 
INNER JOIN ListOrder ON Item.ItemCellID=ListOrder.ItemCellID 
INNER JOIN Phase ON ListOrder.PhaseID=Phase.PhaseID 
INNER JOIN Block ON Phase.BlockID=Block.BlockID 
WHERE ListID=1
GROUP BY Item.ItemCellID, Item.TemplateID
   <--- Entering ItemCell::LoadAOIs() 1 --->
sqlite: SELECT AOIArgs.AOIID, AOIArgs.ArgID, AOIArgs.Info 
FROM AOIArgs INNER JOIN AOI ON AOI.AOIID=AOIArgs.AOIID 
WHERE AOI.ID=1 AND AOI.Link='itemcell' 
ORDER BY AOIArgs.AOIID, AOIArgs.ArgID
sqlite: SELECT AOI.AOIID, Name, Resource, x1, y1, Layer 
FROM AOI 
WHERE ID=1 AND Link='itemcell' 
ORDER BY Layer, AOI.AOIID ASC
   <--- Exiting ItemCell::LoadAOIs() 1 --->
   <--- Entering ItemCell::LoadResources() 1 --->
sqlite: SELECT Code, Data 
FROM Resource 
WHERE ItemCellID= 1 ORDER BY Code
IMGFILE=sg.bmp
SFILE=01.raw
TXT=Hello world
   <--- Exiting ItemCell::LoadResources() 1 --->
   <--- Entering ItemCell::LoadAOIs() 2 --->
sqlite: SELECT AOIArgs.AOIID, AOIArgs.ArgID, AOIArgs.Info 
FROM AOIArgs INNER JOIN AOI ON AOI.AOIID=AOIArgs.AOIID 
WHERE AOI.ID=2 AND AOI.Link='itemcell' 
ORDER BY AOIArgs.AOIID, AOIArgs.ArgID
sqlite: SELECT AOI.AOIID, Name, Resource, x1, y1, Layer 
FROM AOI 
WHERE ID=2 AND Link='itemcell' 
ORDER BY Layer, AOI.AOIID ASC
   <--- Exiting ItemCell::LoadAOIs() 2 --->
   <--- Entering ItemCell::LoadResources() 2 --->
sqlite: SELECT Code, Data 
FROM Resource 
WHERE ItemCellID= 2 ORDER BY Code
IMGFILE=sg.BMP
SFILE=02.raw
TXT=Yo
   <--- Exiting ItemCell::LoadResources() 2 --->
   <--- Entering ItemCell::LoadAOIs() 3 --->
sqlite: SELECT AOIArgs.AOIID, AOIArgs.ArgID, AOIArgs.Info 
FROM AOIArgs INNER JOIN AOI ON AOI.AOIID=AOIArgs.AOIID 
WHERE AOI.ID=3 AND AOI.Link='itemcell' 
ORDER BY AOIArgs.AOIID, AOIArgs.ArgID
sqlite: SELECT AOI.AOIID, Name, Resource, x1, y1, Layer 
FROM AOI 
WHERE ID=3 AND Link='itemcell' 
ORDER BY Layer, AOI.AOIID ASC
   <--- Exiting ItemCell::LoadAOIs() 3 --->
   <--- Entering ItemCell::LoadResources() 3 --->
sqlite: SELECT Code, Data 
FROM Resource 
WHERE ItemCellID= 3 ORDER BY Code
IMGFILE=sg.Bmp
SFILE=03.raw
TXT=Trial3
   <--- Exiting ItemCell::LoadResources() 3 --->
   <--- Entering ItemCell::LoadAOIs() 4 --->
sqlite: SELECT AOIArgs.AOIID, AOIArgs.ArgID, AOIArgs.Info 
FROM AOIArgs INNER JOIN AOI ON AOI.AOIID=AOIArgs.AOIID 
WHERE AOI.ID=4 AND AOI.Link='itemcell' 
ORDER BY AOIArgs.AOIID, AOIArgs.ArgID
sqlite: SELECT AOI.AOIID, Name, Resource, x1, y1, Layer 
FROM AOI 
WHERE ID=4 AND Link='itemcell' 
ORDER BY Layer, AOI.AOIID ASC
   <--- Exiting ItemCell::LoadAOIs() 4 --->
   <--- Entering ItemCell::LoadResources() 4 --->
sqlite: SELECT Code, Data 
FROM Resource 
WHERE ItemCellID= 4 ORDER BY Code
IMGFILE=sg.BMp
SFILE=04.raw
TXT=Trial4
   <--- Exiting ItemCell::LoadResources() 4 --->
<--- Exiting Experiment::LoadItems() --->
<--- Entering Experiment::PurgeTrialsTodo() --->
sqlite: SELECT COUNT(*) FROM sqlite_master WHERE type='table' and name='TrialsTodo'
sqlite: DELETE FROM TrialsTodo WHERE SessionID=1
<--- Exiting Experiment::PurgeTrialsTodo() --->
<--- Entering Experiment::SequenceItems() --->
sqlite: SELECT Block.BlockID, Block.OrderConstraint 
FROM Block 
INNER JOIN Phase ON Block.BlockID=Phase.BlockID 
INNER JOIN ListOrder ON Phase.PhaseID=ListOrder.PhaseID 
WHERE (ListID= 1 ) AND (Block.OrderConstraint IS NOT NULL) 
GROUP BY Block.OrderConstraint, Block.BlockID
sqlite: SELECT Block.BlockID 
FROM Block 
INNER JOIN Phase ON Block.BlockID=Phase.BlockID 
INNER JOIN ListOrder ON Phase.PhaseID=ListOrder.PhaseID 
WHERE (ListID= 1 ) AND (Block.OrderConstraint IS NULL) 
GROUP BY Block.BlockID 
ORDER BY RANDOM()
Block order is:
1 

sqlite: SELECT Phase.PhaseID, Phase.OrderConstraint 
FROM Phase 
INNER JOIN ListOrder ON Phase.PhaseID=ListOrder.PhaseID 
WHERE (Phase.BlockID= 1 ) AND (ListID= 1) AND (Phase.OrderConstraint IS NOT NULL) 
GROUP BY Phase.OrderConstraint, Phase.PhaseID
sqlite: SELECT Phase.PhaseID, Phase.OrderConstraint 
FROM Phase 
INNER JOIN ListOrder ON Phase.PhaseID=ListOrder.PhaseID 
WHERE (Phase.BlockID= 1 ) AND (ListID= 1) AND (Phase.OrderConstraint IS NULL) 
GROUP BY Phase.PhaseID 
ORDER BY RANDOM()
Phase order is:
1 

sqlite: SELECT ItemCellID, OrderConstraint FROM ListOrder 
WHERE (PhaseID=1) AND (ListID=1) AND (OrderConstraint IS NOT NULL) 
ORDER BY OrderConstraint
sqlite: SELECT ItemCellID, OrderConstraint FROM ListOrder 
WHERE (PhaseID=1) AND (ListID=1) AND (OrderConstraint IS NULL) 
ORDER BY RANDOM()
Item order is:
1 2 3 4 

<--- Exiting Experiment::SequenceItems() --->
<--- Entering Experiment::FillTrialsTodo() --->
sqlite: CREATE TABLE IF NOT EXISTS TrialsTodo (SessionID INTEGER, ItemCellID INTEGER, BlockID INTEGER, PhaseID INTEGER, Ord INTEGER)
sqlite: BEGIN;
sqlite: INSERT INTO TrialsTodo VALUES (1, 1, 1, 1, 1)
sqlite: INSERT INTO TrialsTodo VALUES (1, 2, 1, 1, 2)
sqlite: INSERT INTO TrialsTodo VALUES (1, 3, 1, 1, 3)
sqlite: INSERT INTO TrialsTodo VALUES (1, 4, 1, 1, 4)
sqlite: COMMIT;
<--- Exiting Experiment::FillTrialsTodo() --->
<--- Entering Experiment::CreateTrialObjects() --->
There are 4 trials in all
<--- Exiting Experiment::CreateTrialObjects() --->
<--- Exiting Experiment::InitializeExp() --->
<--- Entering Experiment::Prepare() 0 --->
here1
here2
display not initialized
Display size is 1366 768
display initialized
ttf initialized
<--- Entering Audio_SDL::Audio_SDL() 0 --->
<--- Exiting Audio_SDL::Audio_SDL() 0 --->
audio initialized
<--- Exiting Experiment::Prepare() 0 --->
<--- Entering Experiment::PrepareNextTrial() 0 --->
   <--- Entering Template::AddAOIs() only (1) --->
   <--- Exiting Template::AddAOIs() only (1) --->
   <--- Entering Template::Prepare() only (1) --->
   <--- Entering State::Prepare() only (1) --->
         <--- Entering Event::Prepare() 1 --->
         <--- Exiting Event::Prepare() 1 --->
         <--- Entering Event::Prepare() 2 --->
   <--- Entering StimulusTxt::Prepare() 0 --->
   <--- Exiting StimulusTxt::Prepare() 0 --->
         <--- Exiting Event::Prepare() 2 --->
         <--- Entering Event::Prepare() 5 --->
   <--- Entering Stimulus::Prepare() 0 --->
   <--- Exiting Stimulus::Prepare() 0 --->
<--- Entering StimulusImg::InitMemSurface() 4 --->
initializing memory surface
<--- Exiting StimulusImg::InitMemSurface() 4 --->
      <--- Entering StimulusImg::Prepare() $IMGFILE --->
file extension was bmp
      <--- Exiting StimulusImg::Prepare() $IMGFILE --->
         <--- Exiting Event::Prepare() 5 --->
   <--- Exiting State::Prepare() only (1) --->
<--- Entering Template::AttachState() 1 --->
<--- Exiting Template::AttachState() 1 --->
   <--- Exiting Template::Prepare() only (1) --->
<--- Exiting Experiment::PrepareNextTrial() 0 --->
<--- Entering Experiment::StartNextTrial() 0 --->
   <--- Entering Trial::Start() 1 --->
   <--- Entering ItemCell::Start() 1 --->
      <--- Entering Template::Start() 1 --->
      <--- Exiting Template::Start() 1 --->
         <--- Entering State::Start() only (1) --->
         <--- Entering State::Update() only (1) --->
         <--- Entering Event::Action() 2 --->
   <--- Entering StimulusTxt::Action() 0 --->
   <--- Exiting StimulusTxt::Action() 0 --->
   <--- Entering Stimulus::Action() 0 --->
   <--- Exiting Stimulus::Action() 0 --->
         <--- Exiting Event::Action() 2 --->
         <--- Entering Event::Action() 5 --->
      <--- Entering StimulusImg::Action() $IMGFILE --->
10 10
      <--- Exiting StimulusImg::Action() $IMGFILE --->
         <--- Exiting Event::Action() 5 --->
         <--- Exiting State::Update() only (1) --->
         <--- Exiting State::Start() only (1) --->
   <--- Exiting Trial::Start() 1 --->
<--- Exiting Experiment::StartNextTrial() 0 --->
... user event 7 954
... user event 8 954
timeout signaled
            <--- Entering State::Finish() only (1) --->
         <--- Entering Event::Finish() 1 --->
         <--- Exiting Event::Finish() 1 --->
         <--- Entering Event::Finish() 2 --->
         <--- Exiting Event::Finish() 2 --->
         <--- Entering Event::Finish() 5 --->
         <--- Exiting Event::Finish() 5 --->
            <--- Exiting State::Finish() only (1) --->
<--- Entering Template::HandleEvent() 1 --->
ending trial
   <--- Entering Template::Finish() only (1) --->
            <--- Entering State::Finish() only (1) --->
         <--- Entering Event::Finish() 1 --->
         <--- Exiting Event::Finish() 1 --->
         <--- Entering Event::Finish() 2 --->
         <--- Exiting Event::Finish() 2 --->
         <--- Entering Event::Finish() 5 --->
         <--- Exiting Event::Finish() 5 --->
            <--- Exiting State::Finish() only (1) --->
            <--- Entering State::PostTrial() only (1) --->
            <--- Exiting State::Finish() only (1) --->
   <--- Exiting Template::Finish() only (1) --->
<--- Exiting Template::HandleEvent() 1 --->
trial completed
<--- Entering Experiment::FinishTrial() 0 --->
sqlite: SELECT COUNT(*) FROM sqlite_master WHERE type='table' and name='TrialsTodo'
sqlite: DELETE FROM TrialsTodo WHERE SessionID=1 AND ItemCellID=1 AND Ord=1
   <--- Entering Trial::Finish() 1 --->
      <--- Entering ItemCell::Finish() 1 --->
      <--- Exiting ItemCell::Finish() 1 --->
<--- Exiting Trial::Finish() 1 --->
<--- Exiting Experiment::FinishTrial() 0 --->
<--- Entering Experiment::PrepareNextTrial() 0 --->
   <--- Entering Template::AddAOIs() done_test (2) --->
   <--- Exiting Template::AddAOIs() done_test (2) --->
   <--- Entering Template::Prepare() done_test (2) --->
   <--- Entering State::Prepare() done_test (2) --->
         <--- Entering Event::Prepare() 3 --->
         <--- Exiting Event::Prepare() 3 --->
         <--- Entering Event::Prepare() 6 --->
   <--- Entering Stimulus::Prepare() 0 --->
   <--- Exiting Stimulus::Prepare() 0 --->
<--- Entering StimulusImg::InitMemSurface() 4 --->
<--- Exiting StimulusImg::InitMemSurface() 4 --->
      <--- Entering StimulusImg::Prepare() IMGFILE --->
file resource/IMGFILE missing file extension
