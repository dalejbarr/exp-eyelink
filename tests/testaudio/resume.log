<--- Entering Experiment::Experiment() 0 --->
<--- Exiting Experiment::Experiment() 0 --->
<--- Entering Experiment::InitializeDB() 0 --->
using sqlite3 version
<--- Exiting Experiment::InitializeDB() 0 --->
<--- Entering Experiment::InitializeExp() --->
mode is 1
<--- Entering Experiment::CreateOrPurgeResponseDir()  --->
response/s0000001
<--- Exiting Experiment::CreateOrPurgeResponseDir()  --->
sqlite: SELECT ListID FROM Session WHERE SessionID=1
ListID is 1 for SessionID 1
sqlite: UPDATE Session SET Completion='IN PROGRESS' WHERE SessionID=1
sqlite: SELECT Seed FROM Session WHERE SessionID=1
retrieved seed of 1370882285
sqlite: UPDATE Session SET Completion='IN_PROGRESS' WHERE SessionID=1
sqlite: UPDATE Session SET Date=datetime('now') WHERE SessionID=1
sqlite: SELECT SubjID FROM Subject WHERE SessionID=1
Subject ID is 1
<--- Entering Experiment::LoadTemplates() --->
sqlite: SELECT Template.TemplateID, Template.Timeout, Template.Name 
FROM Template 
INNER JOIN Item ON Template.TemplateID=Item.TemplateID 
INNER JOIN ListOrder ON Item.ItemCellID=ListOrder.ItemCellID 
INNER JOIN Phase ON ListOrder.PhaseID=Phase.PhaseID 
INNER JOIN Block ON Phase.BlockID=Block.BlockID 
WHERE ListOrder.ListID= 1 
GROUP BY Template.TemplateID, Template.Timeout, Template.Name
   <--- Entering Template::Template() only (1) --->
   <--- Exiting Template::Template() only (1) --->

1 templates retrieved

   <--- Entering Template::LoadAOIs() only (1) --->
sqlite: SELECT AOIArgs.AOIID, AOIArgs.ArgID, AOIArgs.Info 
FROM AOIArgs INNER JOIN AOI ON AOI.AOIID=AOIArgs.AOIID 
WHERE AOI.ID=1 AND AOI.Link='template' 
ORDER BY AOIArgs.AOIID, AOIArgs.ArgID
sqlite: SELECT AOI.AOIID, Name, Resource, x1, y1, Layer 
FROM AOI 
WHERE ID=1 AND Link='template' 
ORDER BY Layer, AOI.AOIID ASC
   <--- Exiting Template::LoadAOIs() only (1) --->
sqlite: SELECT StateID, Name, Sequence 
FROM State 
WHERE TemplateID= 1 
ORDER BY Sequence;

TemplateID 1 has 1 states.

      <--- Entering State::State() only (1) --->
      <--- Exiting State::State() only (1) --->
      <--- Entering LoadEvents() only (1) --->
sqlite: SELECT EventID, EvtCmdID, Msec 
FROM Event 
WHERE StateID=1
ORDER BY Msec ASC
         <--- Entering State::GetArgs() only (1) --->
sqlite: SELECT ArgID, Info 
FROM EventArgs
WHERE EventID=1
         <--- Exiting State::GetArgs() only (1) --->
the EvtCmdID was 5
   <--- Entering Event::Event() 1 --->
   <--- Exiting Event::Event() 1 --->
         <--- Entering State::GetArgs() only (1) --->
sqlite: SELECT ArgID, Info 
FROM EventArgs
WHERE EventID=3
         <--- Exiting State::GetArgs() only (1) --->
the EvtCmdID was 10
<--- Entering Template::FindOrCreateInputDev() 0 --->
creating audioinput device
=====> Initializing ALSA SOUNDIN
<--- Exiting Template::FindOrCreateInputDev() 0 --->
   <--- Entering Event::Event() 3 --->
   <--- Exiting Event::Event() 3 --->
      <--- Entering EventRecord::EventRecord() 3 --->
output file set to  $SFILE
      <--- Exiting EventRecord::EventRecord() 3 --->
         <--- Entering State::GetArgs() only (1) --->
sqlite: SELECT ArgID, Info 
FROM EventArgs
WHERE EventID=2
         <--- Exiting State::GetArgs() only (1) --->
the EvtCmdID was 8
         <--- Entering StimulusTxt::StimulusTxt()() $TXT --->
         <--- Exiting StimulusTxt::StimulusTxt()() $TXT --->
      <--- Exiting LoadEvents() only (1) --->
      <--- Entering LoadWatches() only (1) --->
sqlite: SELECT WatchID, WCmdID, NextStateID 
FROM Watch 
WHERE StateID=1
ORDER BY WatchID ASC
         <--- Entering State::GetArgs() only (1) --->
sqlite: SELECT ArgID, Info 
FROM WatchArgs
WHERE WatchID=1
         <--- Exiting State::GetArgs() only (1) --->
      <--- Exiting LoadWatches() only (1) --->
<--- Exiting Experiment::LoadTemplates() --->
<--- Entering Experiment::LoadItems() --->
sqlite: SELECT Item.ItemCellID, Item.TemplateID 
FROM Item 
INNER JOIN ListOrder ON Item.ItemCellID=ListOrder.ItemCellID 
INNER JOIN Phase ON ListOrder.PhaseID=Phase.PhaseID 
INNER JOIN Block ON Phase.BlockID=Block.BlockID 
WHERE ListID=1
GROUP BY Item.ItemCellID, Item.TemplateID
   <--- Entering ItemCell::LoadAOIs() 1 --->
sqlite: SELECT AOIArgs.AOIID, AOIArgs.ArgID, AOIArgs.Info 
FROM AOIArgs INNER JOIN AOI ON AOI.AOIID=AOIArgs.AOIID 
WHERE AOI.ID=1 AND AOI.Link='itemcell' 
ORDER BY AOIArgs.AOIID, AOIArgs.ArgID
sqlite: SELECT AOI.AOIID, Name, Resource, x1, y1, Layer 
FROM AOI 
WHERE ID=1 AND Link='itemcell' 
ORDER BY Layer, AOI.AOIID ASC
   <--- Exiting ItemCell::LoadAOIs() 1 --->
   <--- Entering ItemCell::LoadResources() 1 --->
sqlite: SELECT Code, Data 
FROM Resource 
WHERE ItemCellID= 1 ORDER BY Code
SFILE=01.raw
TXT=Hello world
   <--- Exiting ItemCell::LoadResources() 1 --->
   <--- Entering ItemCell::LoadAOIs() 2 --->
sqlite: SELECT AOIArgs.AOIID, AOIArgs.ArgID, AOIArgs.Info 
FROM AOIArgs INNER JOIN AOI ON AOI.AOIID=AOIArgs.AOIID 
WHERE AOI.ID=2 AND AOI.Link='itemcell' 
ORDER BY AOIArgs.AOIID, AOIArgs.ArgID
sqlite: SELECT AOI.AOIID, Name, Resource, x1, y1, Layer 
FROM AOI 
WHERE ID=2 AND Link='itemcell' 
ORDER BY Layer, AOI.AOIID ASC
   <--- Exiting ItemCell::LoadAOIs() 2 --->
   <--- Entering ItemCell::LoadResources() 2 --->
sqlite: SELECT Code, Data 
FROM Resource 
WHERE ItemCellID= 2 ORDER BY Code
SFILE=02.raw
TXT=Yo
   <--- Exiting ItemCell::LoadResources() 2 --->
   <--- Entering ItemCell::LoadAOIs() 3 --->
sqlite: SELECT AOIArgs.AOIID, AOIArgs.ArgID, AOIArgs.Info 
FROM AOIArgs INNER JOIN AOI ON AOI.AOIID=AOIArgs.AOIID 
WHERE AOI.ID=3 AND AOI.Link='itemcell' 
ORDER BY AOIArgs.AOIID, AOIArgs.ArgID
sqlite: SELECT AOI.AOIID, Name, Resource, x1, y1, Layer 
FROM AOI 
WHERE ID=3 AND Link='itemcell' 
ORDER BY Layer, AOI.AOIID ASC
   <--- Exiting ItemCell::LoadAOIs() 3 --->
   <--- Entering ItemCell::LoadResources() 3 --->
sqlite: SELECT Code, Data 
FROM Resource 
WHERE ItemCellID= 3 ORDER BY Code
SFILE=03.raw
TXT=Trial3
   <--- Exiting ItemCell::LoadResources() 3 --->
   <--- Entering ItemCell::LoadAOIs() 4 --->
sqlite: SELECT AOIArgs.AOIID, AOIArgs.ArgID, AOIArgs.Info 
FROM AOIArgs INNER JOIN AOI ON AOI.AOIID=AOIArgs.AOIID 
WHERE AOI.ID=4 AND AOI.Link='itemcell' 
ORDER BY AOIArgs.AOIID, AOIArgs.ArgID
sqlite: SELECT AOI.AOIID, Name, Resource, x1, y1, Layer 
FROM AOI 
WHERE ID=4 AND Link='itemcell' 
ORDER BY Layer, AOI.AOIID ASC
   <--- Exiting ItemCell::LoadAOIs() 4 --->
   <--- Entering ItemCell::LoadResources() 4 --->
sqlite: SELECT Code, Data 
FROM Resource 
WHERE ItemCellID= 4 ORDER BY Code
SFILE=04.raw
TXT=Trial4
   <--- Exiting ItemCell::LoadResources() 4 --->
<--- Exiting Experiment::LoadItems() --->
<--- Entering Experiment::LoadTrialsTodo() --->
sqlite: SELECT ItemCellID, BlockID, PhaseID, Ord FROM TrialsTodo WHERE SessionID=1 ORDER BY Ord
4 trials remaining.
<--- Exiting Experiment::LoadTrialsTodo() --->
<--- Entering Experiment::CreateTrialObjects() --->
There are 4 trials in all
<--- Exiting Experiment::CreateTrialObjects() --->
<--- Exiting Experiment::InitializeExp() --->
<--- Entering Experiment::Prepare() 0 --->
Display size is 3200 1080
<--- Entering Audio_SDL::Audio_SDL() 0 --->
<--- Exiting Audio_SDL::Audio_SDL() 0 --->
<--- Exiting Experiment::Prepare() 0 --->
<--- Entering Experiment::PrepareNextTrial() 0 --->
   <--- Entering Template::AddAOIs() only (1) --->
   <--- Exiting Template::AddAOIs() only (1) --->
   <--- Entering Template::Prepare() only (1) --->
   <--- Entering State::Prepare() only (1) --->
         <--- Entering Event::Prepare() 1 --->
         <--- Exiting Event::Prepare() 1 --->
      <--- Entering EventRecord::Prepare() 3 --->
      <--- Exiting EventRecord::Prepare() 3 --->
         <--- Entering Event::Prepare() 3 --->
         <--- Exiting Event::Prepare() 3 --->
         <--- Entering Event::Prepare() 2 --->
   <--- Entering StimulusTxt::Prepare() 0 --->
   <--- Exiting StimulusTxt::Prepare() 0 --->
         <--- Exiting Event::Prepare() 2 --->
   <--- Exiting State::Prepare() only (1) --->
<--- Entering Template::AttachState() 1 --->
<--- Exiting Template::AttachState() 1 --->
      <--- Entering AlsaSoundIn::Prepare() 0 --->
response/s0000001
saving file to response/s0000001/02.raw
   <--- Entering InputDev::Prepare() 3 --->
   <--- Exiting InputDev::Prepare() 3 --->
      <--- Exiting AlsaSoundIn::Prepare() 0 --->
      <--- Entering AlsaSoundIn::MAIN() 0 --->
   <--- Exiting Template::Prepare() only (1) --->
<--- Exiting Experiment::PrepareNextTrial() 0 --->
<--- Entering Experiment::StartNextTrial() 0 --->
   <--- Entering Trial::Start() 1 --->
   <--- Entering ItemCell::Start() 2 --->
      <--- Entering Template::Start() 1 --->
      <--- Exiting Template::Start() 1 --->
         <--- Entering State::Start() only (1) --->

!! ALSA now recording !!

   <--- Entering InputDev::Start() 3 --->
   <--- Exiting InputDev::Start() 3 --->
         <--- Entering Event::Action() 3 --->
stimulus associated w/EventID=3 was not defined
         <--- Exiting Event::Action() 3 --->
         <--- Exiting State::Start() only (1) --->
   <--- Exiting Trial::Start() 1 --->
<--- Exiting Experiment::StartNextTrial() 0 --->
         <--- Entering Event::Action() 2 --->
   <--- Entering StimulusTxt::Action() 0 --->
   <--- Exiting StimulusTxt::Action() 0 --->
   <--- Entering Stimulus::Action() 0 --->
   <--- Exiting Stimulus::Action() 0 --->
         <--- Exiting Event::Action() 2 --->
state timeout
the user event was 24
timeout signaled
            <--- Entering State::Finish() only (1) --->
         <--- Entering Event::Finish() 1 --->
         <--- Exiting Event::Finish() 1 --->
         <--- Entering Event::Finish() 3 --->
         <--- Exiting Event::Finish() 3 --->
         <--- Entering Event::Finish() 2 --->
         <--- Exiting Event::Finish() 2 --->
            <--- Exiting State::Finish() only (1) --->
<--- Entering Template::HandleEvent() 1 --->
ending trial
   <--- Entering Template::Finish() only (1) --->
      <--- Exiting AlsaSoundIn::MAIN() 0 --->
==== RECORDING STOPPED ====
   <--- Entering InputDev::Stop() 3 --->
   <--- Exiting InputDev::Stop() 3 --->
   <--- Entering Trial::SaveRespData() 1 --->
0 events saved
   <--- Exiting Trial::SaveRespData() 1 --->
            <--- Entering State::Finish() only (1) --->
         <--- Entering Event::Finish() 1 --->
         <--- Exiting Event::Finish() 1 --->
         <--- Entering Event::Finish() 3 --->
         <--- Exiting Event::Finish() 3 --->
         <--- Entering Event::Finish() 2 --->
         <--- Exiting Event::Finish() 2 --->
            <--- Exiting State::Finish() only (1) --->
            <--- Entering State::PostTrial() only (1) --->
            <--- Exiting State::Finish() only (1) --->
   <--- Exiting Template::Finish() only (1) --->
<--- Exiting Template::HandleEvent() 1 --->
trial completed
<--- Entering Experiment::FinishTrial() 0 --->
sqlite: SELECT COUNT(*) FROM sqlite_master WHERE type='table' and name='TrialsTodo'
sqlite: DELETE FROM TrialsTodo WHERE SessionID=1 AND ItemCellID=2 AND Ord=1
   <--- Entering Trial::Finish() 1 --->
      <--- Entering ItemCell::Finish() 2 --->
      <--- Exiting ItemCell::Finish() 2 --->
<--- Exiting Trial::Finish() 1 --->
<--- Exiting Experiment::FinishTrial() 0 --->
<--- Entering Experiment::PrepareNextTrial() 0 --->
   <--- Entering Template::AddAOIs() only (1) --->
   <--- Exiting Template::AddAOIs() only (1) --->
   <--- Entering Template::Prepare() only (1) --->
   <--- Entering State::Prepare() only (1) --->
         <--- Entering Event::Prepare() 1 --->
         <--- Exiting Event::Prepare() 1 --->
      <--- Entering EventRecord::Prepare() 3 --->
      <--- Exiting EventRecord::Prepare() 3 --->
         <--- Entering Event::Prepare() 3 --->
         <--- Exiting Event::Prepare() 3 --->
         <--- Entering Event::Prepare() 2 --->
   <--- Entering StimulusTxt::Prepare() 0 --->
   <--- Exiting StimulusTxt::Prepare() 0 --->
         <--- Exiting Event::Prepare() 2 --->
   <--- Exiting State::Prepare() only (1) --->
<--- Entering Template::AttachState() 1 --->
<--- Exiting Template::AttachState() 1 --->
      <--- Entering AlsaSoundIn::Prepare() 0 --->
response/s0000001
saving file to response/s0000001/04.raw
   <--- Entering InputDev::Prepare() 3 --->
   <--- Exiting InputDev::Prepare() 3 --->
      <--- Entering AlsaSoundIn::MAIN() 0 --->
      <--- Exiting AlsaSoundIn::Prepare() 0 --->
   <--- Exiting Template::Prepare() only (1) --->
<--- Exiting Experiment::PrepareNextTrial() 0 --->
<--- Entering Experiment::StartNextTrial() 0 --->
   <--- Entering Trial::Start() 2 --->
   <--- Entering ItemCell::Start() 4 --->
      <--- Entering Template::Start() 1 --->
      <--- Exiting Template::Start() 1 --->
         <--- Entering State::Start() only (1) --->

!! ALSA now recording !!

   <--- Entering InputDev::Start() 3 --->
   <--- Exiting InputDev::Start() 3 --->
         <--- Entering Event::Action() 3 --->
stimulus associated w/EventID=3 was not defined
         <--- Exiting Event::Action() 3 --->
         <--- Exiting State::Start() only (1) --->
   <--- Exiting Trial::Start() 2 --->
<--- Exiting Experiment::StartNextTrial() 0 --->
         <--- Entering Event::Action() 2 --->
   <--- Entering StimulusTxt::Action() 0 --->
   <--- Exiting StimulusTxt::Action() 0 --->
   <--- Entering Stimulus::Action() 0 --->
   <--- Exiting Stimulus::Action() 0 --->
         <--- Exiting Event::Action() 2 --->
state timeout
the user event was 24
timeout signaled
            <--- Entering State::Finish() only (1) --->
         <--- Entering Event::Finish() 1 --->
         <--- Exiting Event::Finish() 1 --->
         <--- Entering Event::Finish() 3 --->
         <--- Exiting Event::Finish() 3 --->
         <--- Entering Event::Finish() 2 --->
         <--- Exiting Event::Finish() 2 --->
            <--- Exiting State::Finish() only (1) --->
<--- Entering Template::HandleEvent() 1 --->
ending trial
   <--- Entering Template::Finish() only (1) --->
      <--- Exiting AlsaSoundIn::MAIN() 0 --->
==== RECORDING STOPPED ====
   <--- Entering InputDev::Stop() 3 --->
   <--- Exiting InputDev::Stop() 3 --->
   <--- Entering Trial::SaveRespData() 2 --->
0 events saved
   <--- Exiting Trial::SaveRespData() 2 --->
            <--- Entering State::Finish() only (1) --->
         <--- Entering Event::Finish() 1 --->
         <--- Exiting Event::Finish() 1 --->
         <--- Entering Event::Finish() 3 --->
         <--- Exiting Event::Finish() 3 --->
         <--- Entering Event::Finish() 2 --->
         <--- Exiting Event::Finish() 2 --->
            <--- Exiting State::Finish() only (1) --->
            <--- Entering State::PostTrial() only (1) --->
            <--- Exiting State::Finish() only (1) --->
   <--- Exiting Template::Finish() only (1) --->
<--- Exiting Template::HandleEvent() 1 --->
trial completed
<--- Entering Experiment::FinishTrial() 0 --->
sqlite: SELECT COUNT(*) FROM sqlite_master WHERE type='table' and name='TrialsTodo'
sqlite: DELETE FROM TrialsTodo WHERE SessionID=1 AND ItemCellID=4 AND Ord=2
   <--- Entering Trial::Finish() 2 --->
      <--- Entering ItemCell::Finish() 4 --->
      <--- Exiting ItemCell::Finish() 4 --->
<--- Exiting Trial::Finish() 2 --->
<--- Exiting Experiment::FinishTrial() 0 --->
<--- Entering Experiment::PrepareNextTrial() 0 --->
   <--- Entering Template::AddAOIs() only (1) --->
   <--- Exiting Template::AddAOIs() only (1) --->
   <--- Entering Template::Prepare() only (1) --->
   <--- Entering State::Prepare() only (1) --->
         <--- Entering Event::Prepare() 1 --->
         <--- Exiting Event::Prepare() 1 --->
      <--- Entering EventRecord::Prepare() 3 --->
      <--- Exiting EventRecord::Prepare() 3 --->
         <--- Entering Event::Prepare() 3 --->
         <--- Exiting Event::Prepare() 3 --->
         <--- Entering Event::Prepare() 2 --->
   <--- Entering StimulusTxt::Prepare() 0 --->
   <--- Exiting StimulusTxt::Prepare() 0 --->
         <--- Exiting Event::Prepare() 2 --->
   <--- Exiting State::Prepare() only (1) --->
<--- Entering Template::AttachState() 1 --->
<--- Exiting Template::AttachState() 1 --->
      <--- Entering AlsaSoundIn::Prepare() 0 --->
response/s0000001
saving file to response/s0000001/01.raw
   <--- Entering InputDev::Prepare() 3 --->
   <--- Exiting InputDev::Prepare() 3 --->
      <--- Entering AlsaSoundIn::MAIN() 0 --->
      <--- Exiting AlsaSoundIn::Prepare() 0 --->
   <--- Exiting Template::Prepare() only (1) --->
<--- Exiting Experiment::PrepareNextTrial() 0 --->
<--- Entering Experiment::StartNextTrial() 0 --->
   <--- Entering Trial::Start() 3 --->
   <--- Entering ItemCell::Start() 1 --->
      <--- Entering Template::Start() 1 --->
      <--- Exiting Template::Start() 1 --->
         <--- Entering State::Start() only (1) --->

!! ALSA now recording !!

   <--- Entering InputDev::Start() 3 --->
   <--- Exiting InputDev::Start() 3 --->
         <--- Entering Event::Action() 3 --->
stimulus associated w/EventID=3 was not defined
         <--- Exiting Event::Action() 3 --->
         <--- Exiting State::Start() only (1) --->
   <--- Exiting Trial::Start() 3 --->
<--- Exiting Experiment::StartNextTrial() 0 --->
         <--- Entering Event::Action() 2 --->
   <--- Entering StimulusTxt::Action() 0 --->
   <--- Exiting StimulusTxt::Action() 0 --->
   <--- Entering Stimulus::Action() 0 --->
   <--- Exiting Stimulus::Action() 0 --->
         <--- Exiting Event::Action() 2 --->
state timeout
the user event was 24
timeout signaled
            <--- Entering State::Finish() only (1) --->
         <--- Entering Event::Finish() 1 --->
         <--- Exiting Event::Finish() 1 --->
         <--- Entering Event::Finish() 3 --->
         <--- Exiting Event::Finish() 3 --->
         <--- Entering Event::Finish() 2 --->
         <--- Exiting Event::Finish() 2 --->
            <--- Exiting State::Finish() only (1) --->
<--- Entering Template::HandleEvent() 1 --->
ending trial
   <--- Entering Template::Finish() only (1) --->
      <--- Exiting AlsaSoundIn::MAIN() 0 --->
==== RECORDING STOPPED ====
   <--- Entering InputDev::Stop() 3 --->
   <--- Exiting InputDev::Stop() 3 --->
   <--- Entering Trial::SaveRespData() 3 --->
0 events saved
   <--- Exiting Trial::SaveRespData() 3 --->
            <--- Entering State::Finish() only (1) --->
         <--- Entering Event::Finish() 1 --->
         <--- Exiting Event::Finish() 1 --->
         <--- Entering Event::Finish() 3 --->
         <--- Exiting Event::Finish() 3 --->
         <--- Entering Event::Finish() 2 --->
         <--- Exiting Event::Finish() 2 --->
            <--- Exiting State::Finish() only (1) --->
            <--- Entering State::PostTrial() only (1) --->
            <--- Exiting State::Finish() only (1) --->
   <--- Exiting Template::Finish() only (1) --->
<--- Exiting Template::HandleEvent() 1 --->
trial completed
<--- Entering Experiment::FinishTrial() 0 --->
sqlite: SELECT COUNT(*) FROM sqlite_master WHERE type='table' and name='TrialsTodo'
sqlite: DELETE FROM TrialsTodo WHERE SessionID=1 AND ItemCellID=1 AND Ord=3
   <--- Entering Trial::Finish() 3 --->
      <--- Entering ItemCell::Finish() 1 --->
      <--- Exiting ItemCell::Finish() 1 --->
<--- Exiting Trial::Finish() 3 --->
<--- Exiting Experiment::FinishTrial() 0 --->
<--- Entering Experiment::PrepareNextTrial() 0 --->
   <--- Entering Template::AddAOIs() only (1) --->
   <--- Exiting Template::AddAOIs() only (1) --->
   <--- Entering Template::Prepare() only (1) --->
   <--- Entering State::Prepare() only (1) --->
         <--- Entering Event::Prepare() 1 --->
         <--- Exiting Event::Prepare() 1 --->
      <--- Entering EventRecord::Prepare() 3 --->
      <--- Exiting EventRecord::Prepare() 3 --->
         <--- Entering Event::Prepare() 3 --->
         <--- Exiting Event::Prepare() 3 --->
         <--- Entering Event::Prepare() 2 --->
   <--- Entering StimulusTxt::Prepare() 0 --->
   <--- Exiting StimulusTxt::Prepare() 0 --->
         <--- Exiting Event::Prepare() 2 --->
   <--- Exiting State::Prepare() only (1) --->
<--- Entering Template::AttachState() 1 --->
<--- Exiting Template::AttachState() 1 --->
      <--- Entering AlsaSoundIn::Prepare() 0 --->
response/s0000001
saving file to response/s0000001/03.raw
   <--- Entering InputDev::Prepare() 3 --->
   <--- Exiting InputDev::Prepare() 3 --->
      <--- Entering AlsaSoundIn::MAIN() 0 --->
      <--- Exiting AlsaSoundIn::Prepare() 0 --->
   <--- Exiting Template::Prepare() only (1) --->
<--- Exiting Experiment::PrepareNextTrial() 0 --->
<--- Entering Experiment::StartNextTrial() 0 --->
   <--- Entering Trial::Start() 4 --->
   <--- Entering ItemCell::Start() 3 --->
      <--- Entering Template::Start() 1 --->
      <--- Exiting Template::Start() 1 --->
         <--- Entering State::Start() only (1) --->

!! ALSA now recording !!

   <--- Entering InputDev::Start() 3 --->
   <--- Exiting InputDev::Start() 3 --->
         <--- Entering Event::Action() 3 --->
stimulus associated w/EventID=3 was not defined
         <--- Exiting Event::Action() 3 --->
         <--- Exiting State::Start() only (1) --->
   <--- Exiting Trial::Start() 4 --->
<--- Exiting Experiment::StartNextTrial() 0 --->
         <--- Entering Event::Action() 2 --->
   <--- Entering StimulusTxt::Action() 0 --->
   <--- Exiting StimulusTxt::Action() 0 --->
   <--- Entering Stimulus::Action() 0 --->
   <--- Exiting Stimulus::Action() 0 --->
         <--- Exiting Event::Action() 2 --->
state timeout
the user event was 24
timeout signaled
            <--- Entering State::Finish() only (1) --->
         <--- Entering Event::Finish() 1 --->
         <--- Exiting Event::Finish() 1 --->
         <--- Entering Event::Finish() 3 --->
         <--- Exiting Event::Finish() 3 --->
         <--- Entering Event::Finish() 2 --->
         <--- Exiting Event::Finish() 2 --->
            <--- Exiting State::Finish() only (1) --->
<--- Entering Template::HandleEvent() 1 --->
ending trial
   <--- Entering Template::Finish() only (1) --->
      <--- Exiting AlsaSoundIn::MAIN() 0 --->
==== RECORDING STOPPED ====
   <--- Entering InputDev::Stop() 3 --->
   <--- Exiting InputDev::Stop() 3 --->
   <--- Entering Trial::SaveRespData() 4 --->
0 events saved
   <--- Exiting Trial::SaveRespData() 4 --->
            <--- Entering State::Finish() only (1) --->
         <--- Entering Event::Finish() 1 --->
         <--- Exiting Event::Finish() 1 --->
         <--- Entering Event::Finish() 3 --->
         <--- Exiting Event::Finish() 3 --->
         <--- Entering Event::Finish() 2 --->
         <--- Exiting Event::Finish() 2 --->
            <--- Exiting State::Finish() only (1) --->
            <--- Entering State::PostTrial() only (1) --->
            <--- Exiting State::Finish() only (1) --->
   <--- Exiting Template::Finish() only (1) --->
<--- Exiting Template::HandleEvent() 1 --->
trial completed
<--- Entering Experiment::FinishTrial() 0 --->
sqlite: SELECT COUNT(*) FROM sqlite_master WHERE type='table' and name='TrialsTodo'
sqlite: DELETE FROM TrialsTodo WHERE SessionID=1 AND ItemCellID=3 AND Ord=4
   <--- Entering Trial::Finish() 4 --->
      <--- Entering ItemCell::Finish() 3 --->
      <--- Exiting ItemCell::Finish() 3 --->
<--- Exiting Trial::Finish() 4 --->
<--- Exiting Experiment::FinishTrial() 0 --->
<--- Entering Experiment::PrepareNextTrial() 0 --->
END OF TRIALS!
<--- Exiting Experiment::PrepareNextTrial() 0 --->
finished experiment
cleanup
sqlite: INSERT INTO Trial VALUES (NULL, 1, 2, 1, 850, 3990, NULL, NULL)
sqlite: SELECT seq FROM SQLITE_SEQUENCE WHERE name='Trial'
NULL, 1, 80
sqlite: INSERT INTO Response VALUES (NULL, 1, 80)
sqlite: SELECT seq FROM SQLITE_SEQUENCE WHERE name='Response'
respData has 1 events
sqlite: BEGIN;
sqlite: COMMIT;
      <--- Entering ItemCell::StoreData() 2 --->
sqlite: BEGIN;
sqlite: INSERT INTO StateTiming VALUES (80, 1, 822)
sqlite: COMMIT;
sqlite: BEGIN;
sqlite: INSERT INTO EventTiming VALUES (80, 3, 850)
sqlite: INSERT INTO EventTiming VALUES (80, 2, 867)
sqlite: COMMIT;
      <--- Exiting ItemCell::StoreData() 2 --->
sqlite: INSERT INTO Trial VALUES (NULL, 2, 4, 1, 4013, 7140, NULL, NULL)
sqlite: SELECT seq FROM SQLITE_SEQUENCE WHERE name='Trial'
NULL, 1, 81
sqlite: INSERT INTO Response VALUES (NULL, 1, 81)
sqlite: SELECT seq FROM SQLITE_SEQUENCE WHERE name='Response'
respData has 1 events
sqlite: BEGIN;
sqlite: COMMIT;
      <--- Entering ItemCell::StoreData() 4 --->
sqlite: BEGIN;
sqlite: INSERT INTO StateTiming VALUES (81, 1, 4007)
sqlite: COMMIT;
sqlite: BEGIN;
sqlite: INSERT INTO EventTiming VALUES (81, 3, 4013)
sqlite: INSERT INTO EventTiming VALUES (81, 2, 4023)
sqlite: COMMIT;
      <--- Exiting ItemCell::StoreData() 4 --->
sqlite: INSERT INTO Trial VALUES (NULL, 3, 1, 1, 7166, 10307, NULL, NULL)
sqlite: SELECT seq FROM SQLITE_SEQUENCE WHERE name='Trial'
NULL, 1, 82
sqlite: INSERT INTO Response VALUES (NULL, 1, 82)
sqlite: SELECT seq FROM SQLITE_SEQUENCE WHERE name='Response'
respData has 1 events
sqlite: BEGIN;
sqlite: COMMIT;
      <--- Entering ItemCell::StoreData() 1 --->
sqlite: BEGIN;
sqlite: INSERT INTO StateTiming VALUES (82, 1, 7160)
sqlite: COMMIT;
sqlite: BEGIN;
sqlite: INSERT INTO EventTiming VALUES (82, 3, 7166)
sqlite: INSERT INTO EventTiming VALUES (82, 2, 7177)
sqlite: COMMIT;
      <--- Exiting ItemCell::StoreData() 1 --->
sqlite: INSERT INTO Trial VALUES (NULL, 4, 3, 1, 10343, 13467, NULL, NULL)
sqlite: SELECT seq FROM SQLITE_SEQUENCE WHERE name='Trial'
NULL, 1, 83
sqlite: INSERT INTO Response VALUES (NULL, 1, 83)
sqlite: SELECT seq FROM SQLITE_SEQUENCE WHERE name='Response'
respData has 1 events
sqlite: BEGIN;
sqlite: COMMIT;
      <--- Entering ItemCell::StoreData() 3 --->
sqlite: BEGIN;
sqlite: INSERT INTO StateTiming VALUES (83, 1, 10337)
sqlite: COMMIT;
sqlite: BEGIN;
sqlite: INSERT INTO EventTiming VALUES (83, 3, 10343)
sqlite: INSERT INTO EventTiming VALUES (83, 2, 10353)
sqlite: COMMIT;
      <--- Exiting ItemCell::StoreData() 3 --->
sqlite: UPDATE Session SET Completion='COMPLETED' WHERE SessionID=1
<--- Entering Experiment::~Experiment() --->
.Deleting Trials.
   <--- Entering Trial::~Trial() 4 --->
   <--- Exiting Trial::~Trial() 4 --->
   <--- Entering Trial::~Trial() 3 --->
   <--- Exiting Trial::~Trial() 3 --->
   <--- Entering Trial::~Trial() 2 --->
   <--- Exiting Trial::~Trial() 2 --->
   <--- Entering Trial::~Trial() 1 --->
   <--- Exiting Trial::~Trial() 1 --->
.Deleting ItemCells.
   <--- Entering ItemCell::~ItemCell() 4 --->
   <--- Exiting ItemCell::~ItemCell() 4 --->
   <--- Entering ItemCell::~ItemCell() 3 --->
   <--- Exiting ItemCell::~ItemCell() 3 --->
   <--- Entering ItemCell::~ItemCell() 2 --->
   <--- Exiting ItemCell::~ItemCell() 2 --->
   <--- Entering ItemCell::~ItemCell() 1 --->
   <--- Exiting ItemCell::~ItemCell() 1 --->
.Deleting Templates.
   <--- Entering Template::~Template() only (1) --->
      <--- Entering State::~State() only (1) --->
         <--- Entering Event::~Event() 2 --->
         <--- Exiting Event::~Event() 2 --->
         <--- Entering Event::~Event() 3 --->
         <--- Exiting Event::~Event() 3 --->
         <--- Entering Event::~Event() 1 --->
         <--- Exiting Event::~Event() 1 --->
         <--- Entering Watch::~Watch() 1 --->
         <--- Exiting Watch::~Watch() 1 --->
      <--- Exiting State::~State() only (1) --->
=====> Closing ALSA SOUNDIN
   <--- Exiting Template::~Template() only (1) --->
.Deleting Stimuli.
.Deleting Devices.
.Deleting Recordsets.
<--- Exiting Experiment::~Experiment() --->
<--- Entering Audio_SDL::~Audio_SDL() 0 --->
<--- Exiting Audio_SDL::~Audio_SDL() 0 --->
.Deleting ReportError.
